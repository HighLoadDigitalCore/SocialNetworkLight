#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SexiLove.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SexiLove")]
	public partial class xDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTown(Town instance);
    partial void UpdateTown(Town instance);
    partial void DeleteTown(Town instance);
    partial void InsertUserLock(UserLock instance);
    partial void UpdateUserLock(UserLock instance);
    partial void DeleteUserLock(UserLock instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertFriend(Friend instance);
    partial void UpdateFriend(Friend instance);
    partial void DeleteFriend(Friend instance);
    partial void InsertDating(Dating instance);
    partial void UpdateDating(Dating instance);
    partial void DeleteDating(Dating instance);
    partial void InsertPlaceRating(PlaceRating instance);
    partial void UpdatePlaceRating(PlaceRating instance);
    partial void DeletePlaceRating(PlaceRating instance);
    partial void InsertPlaceImage(PlaceImage instance);
    partial void UpdatePlaceImage(PlaceImage instance);
    partial void DeletePlaceImage(PlaceImage instance);
    partial void InsertMeeting(Meeting instance);
    partial void UpdateMeeting(Meeting instance);
    partial void DeleteMeeting(Meeting instance);
    partial void InsertMeetingPeople(MeetingPeople instance);
    partial void UpdateMeetingPeople(MeetingPeople instance);
    partial void DeleteMeetingPeople(MeetingPeople instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void Insertwebpages_Membership(webpages_Membership instance);
    partial void Updatewebpages_Membership(webpages_Membership instance);
    partial void Deletewebpages_Membership(webpages_Membership instance);
    partial void Insertwebpages_Role(webpages_Role instance);
    partial void Updatewebpages_Role(webpages_Role instance);
    partial void Deletewebpages_Role(webpages_Role instance);
    partial void Insertwebpages_UsersInRole(webpages_UsersInRole instance);
    partial void Updatewebpages_UsersInRole(webpages_UsersInRole instance);
    partial void Deletewebpages_UsersInRole(webpages_UsersInRole instance);
    partial void InsertBlockedUser(BlockedUser instance);
    partial void UpdateBlockedUser(BlockedUser instance);
    partial void DeleteBlockedUser(BlockedUser instance);
    partial void InsertMoneyTransaction(MoneyTransaction instance);
    partial void UpdateMoneyTransaction(MoneyTransaction instance);
    partial void DeleteMoneyTransaction(MoneyTransaction instance);
    partial void InsertUserSetting(UserSetting instance);
    partial void UpdateUserSetting(UserSetting instance);
    partial void DeleteUserSetting(UserSetting instance);
    partial void InsertVisit(Visit instance);
    partial void UpdateVisit(Visit instance);
    partial void DeleteVisit(Visit instance);
    partial void InsertPlaceAdmin(PlaceAdmin instance);
    partial void UpdatePlaceAdmin(PlaceAdmin instance);
    partial void DeletePlaceAdmin(PlaceAdmin instance);
    partial void InsertPlace(Place instance);
    partial void UpdatePlace(Place instance);
    partial void DeletePlace(Place instance);
    partial void InsertTextPage(TextPage instance);
    partial void UpdateTextPage(TextPage instance);
    partial void DeleteTextPage(TextPage instance);
    partial void InsertFAQ(FAQ instance);
    partial void UpdateFAQ(FAQ instance);
    partial void DeleteFAQ(FAQ instance);
    partial void InsertEventCat(EventCat instance);
    partial void UpdateEventCat(EventCat instance);
    partial void DeleteEventCat(EventCat instance);
    partial void InsertEventCatsForTown(EventCatsForTown instance);
    partial void UpdateEventCatsForTown(EventCatsForTown instance);
    partial void DeleteEventCatsForTown(EventCatsForTown instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertEventPeople(EventPeople instance);
    partial void UpdateEventPeople(EventPeople instance);
    partial void DeleteEventPeople(EventPeople instance);
    partial void InsertUserPhoto(UserPhoto instance);
    partial void UpdateUserPhoto(UserPhoto instance);
    partial void DeleteUserPhoto(UserPhoto instance);
    #endregion
		
		public xDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SexiLoveConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public xDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public xDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public xDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public xDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Town> Towns
		{
			get
			{
				return this.GetTable<Town>();
			}
		}
		
		public System.Data.Linq.Table<UserLock> UserLocks
		{
			get
			{
				return this.GetTable<UserLock>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<Friend> Friends
		{
			get
			{
				return this.GetTable<Friend>();
			}
		}
		
		public System.Data.Linq.Table<Dating> Datings
		{
			get
			{
				return this.GetTable<Dating>();
			}
		}
		
		public System.Data.Linq.Table<PlaceRating> PlaceRatings
		{
			get
			{
				return this.GetTable<PlaceRating>();
			}
		}
		
		public System.Data.Linq.Table<PlaceImage> PlaceImages
		{
			get
			{
				return this.GetTable<PlaceImage>();
			}
		}
		
		public System.Data.Linq.Table<Meeting> Meetings
		{
			get
			{
				return this.GetTable<Meeting>();
			}
		}
		
		public System.Data.Linq.Table<MeetingPeople> MeetingPeoples
		{
			get
			{
				return this.GetTable<MeetingPeople>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<webpages_Membership> webpages_Memberships
		{
			get
			{
				return this.GetTable<webpages_Membership>();
			}
		}
		
		public System.Data.Linq.Table<webpages_Role> webpages_Roles
		{
			get
			{
				return this.GetTable<webpages_Role>();
			}
		}
		
		public System.Data.Linq.Table<webpages_UsersInRole> webpages_UsersInRoles
		{
			get
			{
				return this.GetTable<webpages_UsersInRole>();
			}
		}
		
		public System.Data.Linq.Table<BlockedUser> BlockedUsers
		{
			get
			{
				return this.GetTable<BlockedUser>();
			}
		}
		
		public System.Data.Linq.Table<MoneyTransaction> MoneyTransactions
		{
			get
			{
				return this.GetTable<MoneyTransaction>();
			}
		}
		
		public System.Data.Linq.Table<UserSetting> UserSettings
		{
			get
			{
				return this.GetTable<UserSetting>();
			}
		}
		
		public System.Data.Linq.Table<Visit> Visits
		{
			get
			{
				return this.GetTable<Visit>();
			}
		}
		
		public System.Data.Linq.Table<PlaceAdmin> PlaceAdmins
		{
			get
			{
				return this.GetTable<PlaceAdmin>();
			}
		}
		
		public System.Data.Linq.Table<Place> Places
		{
			get
			{
				return this.GetTable<Place>();
			}
		}
		
		public System.Data.Linq.Table<TextPage> TextPages
		{
			get
			{
				return this.GetTable<TextPage>();
			}
		}
		
		public System.Data.Linq.Table<FAQ> FAQs
		{
			get
			{
				return this.GetTable<FAQ>();
			}
		}
		
		public System.Data.Linq.Table<EventCat> EventCats
		{
			get
			{
				return this.GetTable<EventCat>();
			}
		}
		
		public System.Data.Linq.Table<EventCatsForTown> EventCatsForTowns
		{
			get
			{
				return this.GetTable<EventCatsForTown>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<EventPeople> EventPeoples
		{
			get
			{
				return this.GetTable<EventPeople>();
			}
		}
		
		public System.Data.Linq.Table<UserPhoto> UserPhotos
		{
			get
			{
				return this.GetTable<UserPhoto>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Towns")]
	public partial class Town : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<decimal> _Lat;
		
		private System.Nullable<decimal> _Lng;
		
		private EntitySet<User> _Users;
		
		private EntitySet<Place> _Places;
		
		private EntitySet<EventCatsForTown> _EventCatsForTowns;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLatChanging(System.Nullable<decimal> value);
    partial void OnLatChanged();
    partial void OnLngChanging(System.Nullable<decimal> value);
    partial void OnLngChanged();
    #endregion
		
		public Town()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Places = new EntitySet<Place>(new Action<Place>(this.attach_Places), new Action<Place>(this.detach_Places));
			this._EventCatsForTowns = new EntitySet<EventCatsForTown>(new Action<EventCatsForTown>(this.attach_EventCatsForTowns), new Action<EventCatsForTown>(this.detach_EventCatsForTowns));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lat", DbType="Decimal(18,14)")]
		public System.Nullable<decimal> Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this.OnLatChanging(value);
					this.SendPropertyChanging();
					this._Lat = value;
					this.SendPropertyChanged("Lat");
					this.OnLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lng", DbType="Decimal(18,14)")]
		public System.Nullable<decimal> Lng
		{
			get
			{
				return this._Lng;
			}
			set
			{
				if ((this._Lng != value))
				{
					this.OnLngChanging(value);
					this.SendPropertyChanging();
					this._Lng = value;
					this.SendPropertyChanged("Lng");
					this.OnLngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Town_User", Storage="_Users", ThisKey="ID", OtherKey="TownID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Town_Place", Storage="_Places", ThisKey="ID", OtherKey="TownID")]
		public EntitySet<Place> Places
		{
			get
			{
				return this._Places;
			}
			set
			{
				this._Places.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Town_EventCatsForTown", Storage="_EventCatsForTowns", ThisKey="ID", OtherKey="TownID")]
		public EntitySet<EventCatsForTown> EventCatsForTowns
		{
			get
			{
				return this._EventCatsForTowns;
			}
			set
			{
				this._EventCatsForTowns.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Town = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Town = null;
		}
		
		private void attach_Places(Place entity)
		{
			this.SendPropertyChanging();
			entity.Town = this;
		}
		
		private void detach_Places(Place entity)
		{
			this.SendPropertyChanging();
			entity.Town = null;
		}
		
		private void attach_EventCatsForTowns(EventCatsForTown entity)
		{
			this.SendPropertyChanging();
			entity.Town = this;
		}
		
		private void detach_EventCatsForTowns(EventCatsForTown entity)
		{
			this.SendPropertyChanging();
			entity.Town = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserLocks")]
	public partial class UserLock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _TargetID;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnTargetIDChanging(int value);
    partial void OnTargetIDChanged();
    #endregion
		
		public UserLock()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetID", DbType="Int NOT NULL")]
		public int TargetID
		{
			get
			{
				return this._TargetID;
			}
			set
			{
				if ((this._TargetID != value))
				{
					this.OnTargetIDChanging(value);
					this.SendPropertyChanging();
					this._TargetID = value;
					this.SendPropertyChanged("TargetID");
					this.OnTargetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserLock", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserLocks.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserLocks.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Messages")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Text;
		
		private int _ToUserID;
		
		private int _FromUserID;
		
		private bool _IsRead;
		
		private System.DateTime _CreateDate;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnToUserIDChanging(int value);
    partial void OnToUserIDChanged();
    partial void OnFromUserIDChanging(int value);
    partial void OnFromUserIDChanged();
    partial void OnIsReadChanging(bool value);
    partial void OnIsReadChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public Message()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToUserID", DbType="Int NOT NULL")]
		public int ToUserID
		{
			get
			{
				return this._ToUserID;
			}
			set
			{
				if ((this._ToUserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToUserIDChanging(value);
					this.SendPropertyChanging();
					this._ToUserID = value;
					this.SendPropertyChanged("ToUserID");
					this.OnToUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromUserID", DbType="Int NOT NULL")]
		public int FromUserID
		{
			get
			{
				return this._FromUserID;
			}
			set
			{
				if ((this._FromUserID != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromUserIDChanging(value);
					this.SendPropertyChanging();
					this._FromUserID = value;
					this.SendPropertyChanged("FromUserID");
					this.OnFromUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRead", DbType="Bit NOT NULL")]
		public bool IsRead
		{
			get
			{
				return this._IsRead;
			}
			set
			{
				if ((this._IsRead != value))
				{
					this.OnIsReadChanging(value);
					this.SendPropertyChanging();
					this._IsRead = value;
					this.SendPropertyChanged("IsRead");
					this.OnIsReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message", Storage="_User", ThisKey="ToUserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User ToUser
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MessagesToUser.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MessagesToUser.Add(this);
						this._ToUserID = value.ID;
					}
					else
					{
						this._ToUserID = default(int);
					}
					this.SendPropertyChanged("ToUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message1", Storage="_User1", ThisKey="FromUserID", OtherKey="ID", IsForeignKey=true)]
		public User FromUser
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.MessagesFromUser.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.MessagesFromUser.Add(this);
						this._FromUserID = value.ID;
					}
					else
					{
						this._FromUserID = default(int);
					}
					this.SendPropertyChanged("FromUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Friends")]
	public partial class Friend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ToUserID;
		
		private int _FromUserID;
		
		private int _Status;
		
		private System.DateTime _CreateDate;
		
		private bool _IsRead;
		
		private EntityRef<User> _FromUser;
		
		private EntityRef<User> _ToUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnToUserIDChanging(int value);
    partial void OnToUserIDChanged();
    partial void OnFromUserIDChanging(int value);
    partial void OnFromUserIDChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnIsReadChanging(bool value);
    partial void OnIsReadChanged();
    #endregion
		
		public Friend()
		{
			this._FromUser = default(EntityRef<User>);
			this._ToUser = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToUserID", DbType="Int NOT NULL")]
		public int ToUserID
		{
			get
			{
				return this._ToUserID;
			}
			set
			{
				if ((this._ToUserID != value))
				{
					if (this._ToUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToUserIDChanging(value);
					this.SendPropertyChanging();
					this._ToUserID = value;
					this.SendPropertyChanged("ToUserID");
					this.OnToUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromUserID", DbType="Int NOT NULL")]
		public int FromUserID
		{
			get
			{
				return this._FromUserID;
			}
			set
			{
				if ((this._FromUserID != value))
				{
					if (this._FromUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromUserIDChanging(value);
					this.SendPropertyChanging();
					this._FromUserID = value;
					this.SendPropertyChanged("FromUserID");
					this.OnFromUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRead", DbType="Bit NOT NULL")]
		public bool IsRead
		{
			get
			{
				return this._IsRead;
			}
			set
			{
				if ((this._IsRead != value))
				{
					this.OnIsReadChanging(value);
					this.SendPropertyChanging();
					this._IsRead = value;
					this.SendPropertyChanged("IsRead");
					this.OnIsReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friend", Storage="_FromUser", ThisKey="FromUserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User FromUser
		{
			get
			{
				return this._FromUser.Entity;
			}
			set
			{
				User previousValue = this._FromUser.Entity;
				if (((previousValue != value) 
							|| (this._FromUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FromUser.Entity = null;
						previousValue.FriendsFromUser.Remove(this);
					}
					this._FromUser.Entity = value;
					if ((value != null))
					{
						value.FriendsFromUser.Add(this);
						this._FromUserID = value.ID;
					}
					else
					{
						this._FromUserID = default(int);
					}
					this.SendPropertyChanged("FromUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friend1", Storage="_ToUser", ThisKey="ToUserID", OtherKey="ID", IsForeignKey=true)]
		public User ToUser
		{
			get
			{
				return this._ToUser.Entity;
			}
			set
			{
				User previousValue = this._ToUser.Entity;
				if (((previousValue != value) 
							|| (this._ToUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToUser.Entity = null;
						previousValue.FriendsToUser.Remove(this);
					}
					this._ToUser.Entity = value;
					if ((value != null))
					{
						value.FriendsToUser.Add(this);
						this._ToUserID = value.ID;
					}
					else
					{
						this._ToUserID = default(int);
					}
					this.SendPropertyChanged("ToUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Datings")]
	public partial class Dating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _FromUserID;
		
		private int _ToUserID;
		
		private System.DateTime _CreateDate;
		
		private bool _IsRead;
		
		private int _Status;
		
		private EntityRef<User> _FromUser;
		
		private EntityRef<User> _ToUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFromUserIDChanging(int value);
    partial void OnFromUserIDChanged();
    partial void OnToUserIDChanging(int value);
    partial void OnToUserIDChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnIsReadChanging(bool value);
    partial void OnIsReadChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    #endregion
		
		public Dating()
		{
			this._FromUser = default(EntityRef<User>);
			this._ToUser = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromUserID", DbType="Int NOT NULL")]
		public int FromUserID
		{
			get
			{
				return this._FromUserID;
			}
			set
			{
				if ((this._FromUserID != value))
				{
					if (this._FromUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromUserIDChanging(value);
					this.SendPropertyChanging();
					this._FromUserID = value;
					this.SendPropertyChanged("FromUserID");
					this.OnFromUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToUserID", DbType="Int NOT NULL")]
		public int ToUserID
		{
			get
			{
				return this._ToUserID;
			}
			set
			{
				if ((this._ToUserID != value))
				{
					if (this._ToUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToUserIDChanging(value);
					this.SendPropertyChanging();
					this._ToUserID = value;
					this.SendPropertyChanged("ToUserID");
					this.OnToUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRead", DbType="Bit NOT NULL")]
		public bool IsRead
		{
			get
			{
				return this._IsRead;
			}
			set
			{
				if ((this._IsRead != value))
				{
					this.OnIsReadChanging(value);
					this.SendPropertyChanging();
					this._IsRead = value;
					this.SendPropertyChanged("IsRead");
					this.OnIsReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Dating", Storage="_FromUser", ThisKey="FromUserID", OtherKey="ID", IsForeignKey=true)]
		public User FromUser
		{
			get
			{
				return this._FromUser.Entity;
			}
			set
			{
				User previousValue = this._FromUser.Entity;
				if (((previousValue != value) 
							|| (this._FromUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FromUser.Entity = null;
						previousValue.DatingsFromUser.Remove(this);
					}
					this._FromUser.Entity = value;
					if ((value != null))
					{
						value.DatingsFromUser.Add(this);
						this._FromUserID = value.ID;
					}
					else
					{
						this._FromUserID = default(int);
					}
					this.SendPropertyChanged("FromUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Dating1", Storage="_ToUser", ThisKey="ToUserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User ToUser
		{
			get
			{
				return this._ToUser.Entity;
			}
			set
			{
				User previousValue = this._ToUser.Entity;
				if (((previousValue != value) 
							|| (this._ToUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToUser.Entity = null;
						previousValue.DatingsToUser.Remove(this);
					}
					this._ToUser.Entity = value;
					if ((value != null))
					{
						value.DatingsToUser.Add(this);
						this._ToUserID = value.ID;
					}
					else
					{
						this._ToUserID = default(int);
					}
					this.SendPropertyChanged("ToUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlaceRatings")]
	public partial class PlaceRating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Rating;
		
		private int _UserID;
		
		private string _Name;
		
		private int _PlaceID;
		
		private EntityRef<User> _User;
		
		private EntityRef<Place> _Place;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRatingChanging(int value);
    partial void OnRatingChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPlaceIDChanging(int value);
    partial void OnPlaceIDChanged();
    #endregion
		
		public PlaceRating()
		{
			this._User = default(EntityRef<User>);
			this._Place = default(EntityRef<Place>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Int NOT NULL")]
		public int Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaceID", DbType="Int NOT NULL")]
		public int PlaceID
		{
			get
			{
				return this._PlaceID;
			}
			set
			{
				if ((this._PlaceID != value))
				{
					if (this._Place.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlaceIDChanging(value);
					this.SendPropertyChanging();
					this._PlaceID = value;
					this.SendPropertyChanged("PlaceID");
					this.OnPlaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PlaceRating", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PlaceRatings.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PlaceRatings.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Place_PlaceRating", Storage="_Place", ThisKey="PlaceID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Place Place
		{
			get
			{
				return this._Place.Entity;
			}
			set
			{
				Place previousValue = this._Place.Entity;
				if (((previousValue != value) 
							|| (this._Place.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Place.Entity = null;
						previousValue.PlaceRatings.Remove(this);
					}
					this._Place.Entity = value;
					if ((value != null))
					{
						value.PlaceRatings.Add(this);
						this._PlaceID = value.ID;
					}
					else
					{
						this._PlaceID = default(int);
					}
					this.SendPropertyChanged("Place");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlaceImages")]
	public partial class PlaceImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Path;
		
		private int _PlaceID;
		
		private EntityRef<Place> _Place;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnPlaceIDChanging(int value);
    partial void OnPlaceIDChanged();
    #endregion
		
		public PlaceImage()
		{
			this._Place = default(EntityRef<Place>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaceID", DbType="Int NOT NULL")]
		public int PlaceID
		{
			get
			{
				return this._PlaceID;
			}
			set
			{
				if ((this._PlaceID != value))
				{
					if (this._Place.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlaceIDChanging(value);
					this.SendPropertyChanging();
					this._PlaceID = value;
					this.SendPropertyChanged("PlaceID");
					this.OnPlaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Place_PlaceImage", Storage="_Place", ThisKey="PlaceID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Place Place
		{
			get
			{
				return this._Place.Entity;
			}
			set
			{
				Place previousValue = this._Place.Entity;
				if (((previousValue != value) 
							|| (this._Place.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Place.Entity = null;
						previousValue.PlaceImages.Remove(this);
					}
					this._Place.Entity = value;
					if ((value != null))
					{
						value.PlaceImages.Add(this);
						this._PlaceID = value.ID;
					}
					else
					{
						this._PlaceID = default(int);
					}
					this.SendPropertyChanged("Place");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Meeting")]
	public partial class Meeting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<decimal> _Cost;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<System.TimeSpan> _Time;
		
		private System.Nullable<int> _PlaceID;
		
		private string _Type;
		
		private bool _TargetSex;
		
		private System.Nullable<int> _MinAge;
		
		private System.Nullable<int> _MaxAge;
		
		private int _HasAccess;
		
		private string _Comment;
		
		private int _Author;
		
		private EntitySet<MeetingPeople> _MeetingPeoples;
		
		private EntityRef<User> _User;
		
		private EntityRef<Place> _Place;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCostChanging(System.Nullable<decimal> value);
    partial void OnCostChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnTimeChanged();
    partial void OnPlaceIDChanging(System.Nullable<int> value);
    partial void OnPlaceIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnTargetSexChanging(bool value);
    partial void OnTargetSexChanged();
    partial void OnMinAgeChanging(System.Nullable<int> value);
    partial void OnMinAgeChanged();
    partial void OnMaxAgeChanging(System.Nullable<int> value);
    partial void OnMaxAgeChanged();
    partial void OnHasAccessChanging(int value);
    partial void OnHasAccessChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnAuthorChanging(int value);
    partial void OnAuthorChanged();
    #endregion
		
		public Meeting()
		{
			this._MeetingPeoples = new EntitySet<MeetingPeople>(new Action<MeetingPeople>(this.attach_MeetingPeoples), new Action<MeetingPeople>(this.detach_MeetingPeoples));
			this._User = default(EntityRef<User>);
			this._Place = default(EntityRef<Place>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Time")]
		public System.Nullable<System.TimeSpan> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaceID", DbType="Int")]
		public System.Nullable<int> PlaceID
		{
			get
			{
				return this._PlaceID;
			}
			set
			{
				if ((this._PlaceID != value))
				{
					if (this._Place.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlaceIDChanging(value);
					this.SendPropertyChanging();
					this._PlaceID = value;
					this.SendPropertyChanged("PlaceID");
					this.OnPlaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(200)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetSex", DbType="Bit NOT NULL")]
		public bool TargetSex
		{
			get
			{
				return this._TargetSex;
			}
			set
			{
				if ((this._TargetSex != value))
				{
					this.OnTargetSexChanging(value);
					this.SendPropertyChanging();
					this._TargetSex = value;
					this.SendPropertyChanged("TargetSex");
					this.OnTargetSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinAge", DbType="Int")]
		public System.Nullable<int> MinAge
		{
			get
			{
				return this._MinAge;
			}
			set
			{
				if ((this._MinAge != value))
				{
					this.OnMinAgeChanging(value);
					this.SendPropertyChanging();
					this._MinAge = value;
					this.SendPropertyChanged("MinAge");
					this.OnMinAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxAge", DbType="Int")]
		public System.Nullable<int> MaxAge
		{
			get
			{
				return this._MaxAge;
			}
			set
			{
				if ((this._MaxAge != value))
				{
					this.OnMaxAgeChanging(value);
					this.SendPropertyChanging();
					this._MaxAge = value;
					this.SendPropertyChanged("MaxAge");
					this.OnMaxAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasAccess", DbType="Int NOT NULL")]
		public int HasAccess
		{
			get
			{
				return this._HasAccess;
			}
			set
			{
				if ((this._HasAccess != value))
				{
					this.OnHasAccessChanging(value);
					this.SendPropertyChanging();
					this._HasAccess = value;
					this.SendPropertyChanged("HasAccess");
					this.OnHasAccessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(500)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Author", DbType="Int NOT NULL")]
		public int Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meeting_MeetingPeople", Storage="_MeetingPeoples", ThisKey="ID", OtherKey="MeetingID")]
		public EntitySet<MeetingPeople> MeetingPeoples
		{
			get
			{
				return this._MeetingPeoples;
			}
			set
			{
				this._MeetingPeoples.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Meeting", Storage="_User", ThisKey="Author", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Meetings.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Meetings.Add(this);
						this._Author = value.ID;
					}
					else
					{
						this._Author = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Place_Meeting", Storage="_Place", ThisKey="PlaceID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Place Place
		{
			get
			{
				return this._Place.Entity;
			}
			set
			{
				Place previousValue = this._Place.Entity;
				if (((previousValue != value) 
							|| (this._Place.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Place.Entity = null;
						previousValue.Meetings.Remove(this);
					}
					this._Place.Entity = value;
					if ((value != null))
					{
						value.Meetings.Add(this);
						this._PlaceID = value.ID;
					}
					else
					{
						this._PlaceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Place");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MeetingPeoples(MeetingPeople entity)
		{
			this.SendPropertyChanging();
			entity.Meeting = this;
		}
		
		private void detach_MeetingPeoples(MeetingPeople entity)
		{
			this.SendPropertyChanging();
			entity.Meeting = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MeetingPeople")]
	public partial class MeetingPeople : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _MeetingID;
		
		private int _Status;
		
		private System.DateTime _SendDate;
		
		private EntityRef<Meeting> _Meeting;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnMeetingIDChanging(int value);
    partial void OnMeetingIDChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnSendDateChanging(System.DateTime value);
    partial void OnSendDateChanged();
    #endregion
		
		public MeetingPeople()
		{
			this._Meeting = default(EntityRef<Meeting>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeetingID", DbType="Int NOT NULL")]
		public int MeetingID
		{
			get
			{
				return this._MeetingID;
			}
			set
			{
				if ((this._MeetingID != value))
				{
					if (this._Meeting.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeetingIDChanging(value);
					this.SendPropertyChanging();
					this._MeetingID = value;
					this.SendPropertyChanged("MeetingID");
					this.OnMeetingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SendDate", DbType="DateTime NOT NULL")]
		public System.DateTime SendDate
		{
			get
			{
				return this._SendDate;
			}
			set
			{
				if ((this._SendDate != value))
				{
					this.OnSendDateChanging(value);
					this.SendPropertyChanging();
					this._SendDate = value;
					this.SendPropertyChanged("SendDate");
					this.OnSendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meeting_MeetingPeople", Storage="_Meeting", ThisKey="MeetingID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Meeting Meeting
		{
			get
			{
				return this._Meeting.Entity;
			}
			set
			{
				Meeting previousValue = this._Meeting.Entity;
				if (((previousValue != value) 
							|| (this._Meeting.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Meeting.Entity = null;
						previousValue.MeetingPeoples.Remove(this);
					}
					this._Meeting.Entity = value;
					if ((value != null))
					{
						value.MeetingPeoples.Add(this);
						this._MeetingID = value.ID;
					}
					else
					{
						this._MeetingID = default(int);
					}
					this.SendPropertyChanged("Meeting");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MeetingPeople", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MeetingPeoples.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MeetingPeoples.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Email;
		
		private string _Name;
		
		private System.Nullable<int> _TownID;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private System.Nullable<bool> _Sex;
		
		private string _UserName;
		
		private string _UserSurname;
		
		private string _UserPatrinomic;
		
		private string _Orientation;
		
		private string _Purpose;
		
		private string _SearchFor;
		
		private string _Relations;
		
		private string _HasChildren;
		
		private string _Sponsor;
		
		private string _Height;
		
		private string _Weight;
		
		private string _Body;
		
		private string _Appearence;
		
		private string _Eyes;
		
		private string _Hears;
		
		private string _Education;
		
		private string _Spec;
		
		private string _Job;
		
		private string _WorkType;
		
		private string _CompanyName;
		
		private string _Earn;
		
		private string _MonthSalary;
		
		private string _HasCar;
		
		private string _LivingConditions;
		
		private string _LivingTown;
		
		private string _Smoking;
		
		private string _Drinking;
		
		private string _Drugs;
		
		private string _LifePriority;
		
		private string _Music;
		
		private string _Sport;
		
		private string _Hobby;
		
		private string _Books;
		
		private string _Films;
		
		private string _GoodKinds;
		
		private string _BadKinds;
		
		private string _MainPurpose;
		
		private string _SexRole;
		
		private string _SexPeriod;
		
		private string _SexRelation;
		
		private string _SexRelationDetail;
		
		private string _AboutMe;
		
		private System.Nullable<System.DateTime> _LastVisitDate;
		
		private bool _IsVip;
		
		private System.Nullable<System.DateTime> _VipEnd;
		
		private bool _IsUp;
		
		private System.Nullable<System.DateTime> _UpEnd;
		
		private bool _IsHidden;
		
		private System.Nullable<System.DateTime> _HiddenEnd;
		
		private EntitySet<UserLock> _UserLocks;
		
		private EntitySet<Message> _Messages;
		
		private EntitySet<Message> _Messages1;
		
		private EntitySet<Friend> _FriendsFromUser;
		
		private EntitySet<Friend> _FriendsToUser;
		
		private EntitySet<Dating> _DatingsFromUser;
		
		private EntitySet<Dating> _DatingsToUser;
		
		private EntitySet<PlaceRating> _PlaceRatings;
		
		private EntitySet<Meeting> _Meetings;
		
		private EntitySet<MeetingPeople> _MeetingPeoples;
		
		private EntityRef<webpages_Membership> _webpages_Membership;
		
		private EntitySet<webpages_UsersInRole> _webpages_UsersInRoles;
		
		private EntitySet<BlockedUser> _BlockedUsers;
		
		private EntitySet<MoneyTransaction> _MoneyTransactions;
		
		private EntityRef<UserSetting> _UserSetting;
		
		private EntitySet<Visit> _Visits;
		
		private EntitySet<Visit> _Visits1;
		
		private EntitySet<PlaceAdmin> _PlaceAdmins;
		
		private EntitySet<FAQ> _FAQs;
		
		private EntitySet<EventPeople> _EventPeoplesFromUser;
		
		private EntitySet<EventPeople> _EventPeoplesToUser;
		
		private EntitySet<UserPhoto> _UserPhotos;
		
		private EntityRef<Town> _Town;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTownIDChanging(System.Nullable<int> value);
    partial void OnTownIDChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    partial void OnSexChanging(System.Nullable<bool> value);
    partial void OnSexChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserSurnameChanging(string value);
    partial void OnUserSurnameChanged();
    partial void OnUserPatrinomicChanging(string value);
    partial void OnUserPatrinomicChanged();
    partial void OnOrientationChanging(string value);
    partial void OnOrientationChanged();
    partial void OnPurposeChanging(string value);
    partial void OnPurposeChanged();
    partial void OnSearchForChanging(string value);
    partial void OnSearchForChanged();
    partial void OnRelationsChanging(string value);
    partial void OnRelationsChanged();
    partial void OnHasChildrenChanging(string value);
    partial void OnHasChildrenChanged();
    partial void OnSponsorChanging(string value);
    partial void OnSponsorChanged();
    partial void OnHeightChanging(string value);
    partial void OnHeightChanged();
    partial void OnWeightChanging(string value);
    partial void OnWeightChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnAppearenceChanging(string value);
    partial void OnAppearenceChanged();
    partial void OnEyesChanging(string value);
    partial void OnEyesChanged();
    partial void OnHearsChanging(string value);
    partial void OnHearsChanged();
    partial void OnEducationChanging(string value);
    partial void OnEducationChanged();
    partial void OnSpecChanging(string value);
    partial void OnSpecChanged();
    partial void OnJobChanging(string value);
    partial void OnJobChanged();
    partial void OnWorkTypeChanging(string value);
    partial void OnWorkTypeChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnEarnChanging(string value);
    partial void OnEarnChanged();
    partial void OnMonthSalaryChanging(string value);
    partial void OnMonthSalaryChanged();
    partial void OnHasCarChanging(string value);
    partial void OnHasCarChanged();
    partial void OnLivingConditionsChanging(string value);
    partial void OnLivingConditionsChanged();
    partial void OnLivingTownChanging(string value);
    partial void OnLivingTownChanged();
    partial void OnSmokingChanging(string value);
    partial void OnSmokingChanged();
    partial void OnDrinkingChanging(string value);
    partial void OnDrinkingChanged();
    partial void OnDrugsChanging(string value);
    partial void OnDrugsChanged();
    partial void OnLifePriorityChanging(string value);
    partial void OnLifePriorityChanged();
    partial void OnMusicChanging(string value);
    partial void OnMusicChanged();
    partial void OnSportChanging(string value);
    partial void OnSportChanged();
    partial void OnHobbyChanging(string value);
    partial void OnHobbyChanged();
    partial void OnBooksChanging(string value);
    partial void OnBooksChanged();
    partial void OnFilmsChanging(string value);
    partial void OnFilmsChanged();
    partial void OnGoodKindsChanging(string value);
    partial void OnGoodKindsChanged();
    partial void OnBadKindsChanging(string value);
    partial void OnBadKindsChanged();
    partial void OnMainPurposeChanging(string value);
    partial void OnMainPurposeChanged();
    partial void OnSexRoleChanging(string value);
    partial void OnSexRoleChanged();
    partial void OnSexPeriodChanging(string value);
    partial void OnSexPeriodChanged();
    partial void OnSexRelationChanging(string value);
    partial void OnSexRelationChanged();
    partial void OnSexRelationDetailChanging(string value);
    partial void OnSexRelationDetailChanged();
    partial void OnAboutMeChanging(string value);
    partial void OnAboutMeChanged();
    partial void OnLastVisitDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastVisitDateChanged();
    partial void OnIsVipChanging(bool value);
    partial void OnIsVipChanged();
    partial void OnVipEndChanging(System.Nullable<System.DateTime> value);
    partial void OnVipEndChanged();
    partial void OnIsUpChanging(bool value);
    partial void OnIsUpChanged();
    partial void OnUpEndChanging(System.Nullable<System.DateTime> value);
    partial void OnUpEndChanged();
    partial void OnIsHiddenChanging(bool value);
    partial void OnIsHiddenChanged();
    partial void OnHiddenEndChanging(System.Nullable<System.DateTime> value);
    partial void OnHiddenEndChanged();
    #endregion
		
		public User()
		{
			this._UserLocks = new EntitySet<UserLock>(new Action<UserLock>(this.attach_UserLocks), new Action<UserLock>(this.detach_UserLocks));
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._Messages1 = new EntitySet<Message>(new Action<Message>(this.attach_Messages1), new Action<Message>(this.detach_Messages1));
			this._FriendsFromUser = new EntitySet<Friend>(new Action<Friend>(this.attach_FriendsFromUser), new Action<Friend>(this.detach_FriendsFromUser));
			this._FriendsToUser = new EntitySet<Friend>(new Action<Friend>(this.attach_FriendsToUser), new Action<Friend>(this.detach_FriendsToUser));
			this._DatingsFromUser = new EntitySet<Dating>(new Action<Dating>(this.attach_DatingsFromUser), new Action<Dating>(this.detach_DatingsFromUser));
			this._DatingsToUser = new EntitySet<Dating>(new Action<Dating>(this.attach_DatingsToUser), new Action<Dating>(this.detach_DatingsToUser));
			this._PlaceRatings = new EntitySet<PlaceRating>(new Action<PlaceRating>(this.attach_PlaceRatings), new Action<PlaceRating>(this.detach_PlaceRatings));
			this._Meetings = new EntitySet<Meeting>(new Action<Meeting>(this.attach_Meetings), new Action<Meeting>(this.detach_Meetings));
			this._MeetingPeoples = new EntitySet<MeetingPeople>(new Action<MeetingPeople>(this.attach_MeetingPeoples), new Action<MeetingPeople>(this.detach_MeetingPeoples));
			this._webpages_Membership = default(EntityRef<webpages_Membership>);
			this._webpages_UsersInRoles = new EntitySet<webpages_UsersInRole>(new Action<webpages_UsersInRole>(this.attach_webpages_UsersInRoles), new Action<webpages_UsersInRole>(this.detach_webpages_UsersInRoles));
			this._BlockedUsers = new EntitySet<BlockedUser>(new Action<BlockedUser>(this.attach_BlockedUsers), new Action<BlockedUser>(this.detach_BlockedUsers));
			this._MoneyTransactions = new EntitySet<MoneyTransaction>(new Action<MoneyTransaction>(this.attach_MoneyTransactions), new Action<MoneyTransaction>(this.detach_MoneyTransactions));
			this._UserSetting = default(EntityRef<UserSetting>);
			this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
			this._Visits1 = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits1), new Action<Visit>(this.detach_Visits1));
			this._PlaceAdmins = new EntitySet<PlaceAdmin>(new Action<PlaceAdmin>(this.attach_PlaceAdmins), new Action<PlaceAdmin>(this.detach_PlaceAdmins));
			this._FAQs = new EntitySet<FAQ>(new Action<FAQ>(this.attach_FAQs), new Action<FAQ>(this.detach_FAQs));
			this._EventPeoplesFromUser = new EntitySet<EventPeople>(new Action<EventPeople>(this.attach_EventPeoplesFromUser), new Action<EventPeople>(this.detach_EventPeoplesFromUser));
			this._EventPeoplesToUser = new EntitySet<EventPeople>(new Action<EventPeople>(this.attach_EventPeoplesToUser), new Action<EventPeople>(this.detach_EventPeoplesToUser));
			this._UserPhotos = new EntitySet<UserPhoto>(new Action<UserPhoto>(this.attach_UserPhotos), new Action<UserPhoto>(this.detach_UserPhotos));
			this._Town = default(EntityRef<Town>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(200)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TownID", DbType="Int")]
		public System.Nullable<int> TownID
		{
			get
			{
				return this._TownID;
			}
			set
			{
				if ((this._TownID != value))
				{
					if (this._Town.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTownIDChanging(value);
					this.SendPropertyChanging();
					this._TownID = value;
					this.SendPropertyChanged("TownID");
					this.OnTownIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="Bit")]
		public System.Nullable<bool> Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(500)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserSurname", DbType="NVarChar(500)")]
		public string UserSurname
		{
			get
			{
				return this._UserSurname;
			}
			set
			{
				if ((this._UserSurname != value))
				{
					this.OnUserSurnameChanging(value);
					this.SendPropertyChanging();
					this._UserSurname = value;
					this.SendPropertyChanged("UserSurname");
					this.OnUserSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPatrinomic", DbType="NVarChar(500)")]
		public string UserPatrinomic
		{
			get
			{
				return this._UserPatrinomic;
			}
			set
			{
				if ((this._UserPatrinomic != value))
				{
					this.OnUserPatrinomicChanging(value);
					this.SendPropertyChanging();
					this._UserPatrinomic = value;
					this.SendPropertyChanged("UserPatrinomic");
					this.OnUserPatrinomicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Orientation", DbType="NVarChar(200)")]
		public string Orientation
		{
			get
			{
				return this._Orientation;
			}
			set
			{
				if ((this._Orientation != value))
				{
					this.OnOrientationChanging(value);
					this.SendPropertyChanging();
					this._Orientation = value;
					this.SendPropertyChanged("Orientation");
					this.OnOrientationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Purpose", DbType="NVarChar(200)")]
		public string Purpose
		{
			get
			{
				return this._Purpose;
			}
			set
			{
				if ((this._Purpose != value))
				{
					this.OnPurposeChanging(value);
					this.SendPropertyChanging();
					this._Purpose = value;
					this.SendPropertyChanged("Purpose");
					this.OnPurposeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SearchFor", DbType="NVarChar(200)")]
		public string SearchFor
		{
			get
			{
				return this._SearchFor;
			}
			set
			{
				if ((this._SearchFor != value))
				{
					this.OnSearchForChanging(value);
					this.SendPropertyChanging();
					this._SearchFor = value;
					this.SendPropertyChanged("SearchFor");
					this.OnSearchForChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Relations", DbType="NVarChar(200)")]
		public string Relations
		{
			get
			{
				return this._Relations;
			}
			set
			{
				if ((this._Relations != value))
				{
					this.OnRelationsChanging(value);
					this.SendPropertyChanging();
					this._Relations = value;
					this.SendPropertyChanged("Relations");
					this.OnRelationsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasChildren", DbType="NVarChar(200)")]
		public string HasChildren
		{
			get
			{
				return this._HasChildren;
			}
			set
			{
				if ((this._HasChildren != value))
				{
					this.OnHasChildrenChanging(value);
					this.SendPropertyChanging();
					this._HasChildren = value;
					this.SendPropertyChanged("HasChildren");
					this.OnHasChildrenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sponsor", DbType="NVarChar(200)")]
		public string Sponsor
		{
			get
			{
				return this._Sponsor;
			}
			set
			{
				if ((this._Sponsor != value))
				{
					this.OnSponsorChanging(value);
					this.SendPropertyChanging();
					this._Sponsor = value;
					this.SendPropertyChanged("Sponsor");
					this.OnSponsorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="NVarChar(200)")]
		public string Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="NVarChar(200)")]
		public string Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Body", DbType="NVarChar(200)")]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appearence", DbType="NVarChar(200)")]
		public string Appearence
		{
			get
			{
				return this._Appearence;
			}
			set
			{
				if ((this._Appearence != value))
				{
					this.OnAppearenceChanging(value);
					this.SendPropertyChanging();
					this._Appearence = value;
					this.SendPropertyChanged("Appearence");
					this.OnAppearenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eyes", DbType="NVarChar(200)")]
		public string Eyes
		{
			get
			{
				return this._Eyes;
			}
			set
			{
				if ((this._Eyes != value))
				{
					this.OnEyesChanging(value);
					this.SendPropertyChanging();
					this._Eyes = value;
					this.SendPropertyChanged("Eyes");
					this.OnEyesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hears", DbType="NVarChar(200)")]
		public string Hears
		{
			get
			{
				return this._Hears;
			}
			set
			{
				if ((this._Hears != value))
				{
					this.OnHearsChanging(value);
					this.SendPropertyChanging();
					this._Hears = value;
					this.SendPropertyChanged("Hears");
					this.OnHearsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Education", DbType="NVarChar(200)")]
		public string Education
		{
			get
			{
				return this._Education;
			}
			set
			{
				if ((this._Education != value))
				{
					this.OnEducationChanging(value);
					this.SendPropertyChanging();
					this._Education = value;
					this.SendPropertyChanged("Education");
					this.OnEducationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Spec", DbType="NVarChar(200)")]
		public string Spec
		{
			get
			{
				return this._Spec;
			}
			set
			{
				if ((this._Spec != value))
				{
					this.OnSpecChanging(value);
					this.SendPropertyChanging();
					this._Spec = value;
					this.SendPropertyChanged("Spec");
					this.OnSpecChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Job", DbType="NVarChar(200)")]
		public string Job
		{
			get
			{
				return this._Job;
			}
			set
			{
				if ((this._Job != value))
				{
					this.OnJobChanging(value);
					this.SendPropertyChanging();
					this._Job = value;
					this.SendPropertyChanged("Job");
					this.OnJobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkType", DbType="NVarChar(200)")]
		public string WorkType
		{
			get
			{
				return this._WorkType;
			}
			set
			{
				if ((this._WorkType != value))
				{
					this.OnWorkTypeChanging(value);
					this.SendPropertyChanging();
					this._WorkType = value;
					this.SendPropertyChanged("WorkType");
					this.OnWorkTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="NVarChar(200)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Earn", DbType="NVarChar(200)")]
		public string Earn
		{
			get
			{
				return this._Earn;
			}
			set
			{
				if ((this._Earn != value))
				{
					this.OnEarnChanging(value);
					this.SendPropertyChanging();
					this._Earn = value;
					this.SendPropertyChanged("Earn");
					this.OnEarnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthSalary", DbType="NVarChar(200)")]
		public string MonthSalary
		{
			get
			{
				return this._MonthSalary;
			}
			set
			{
				if ((this._MonthSalary != value))
				{
					this.OnMonthSalaryChanging(value);
					this.SendPropertyChanging();
					this._MonthSalary = value;
					this.SendPropertyChanged("MonthSalary");
					this.OnMonthSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasCar", DbType="NVarChar(200)")]
		public string HasCar
		{
			get
			{
				return this._HasCar;
			}
			set
			{
				if ((this._HasCar != value))
				{
					this.OnHasCarChanging(value);
					this.SendPropertyChanging();
					this._HasCar = value;
					this.SendPropertyChanged("HasCar");
					this.OnHasCarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LivingConditions", DbType="NVarChar(200)")]
		public string LivingConditions
		{
			get
			{
				return this._LivingConditions;
			}
			set
			{
				if ((this._LivingConditions != value))
				{
					this.OnLivingConditionsChanging(value);
					this.SendPropertyChanging();
					this._LivingConditions = value;
					this.SendPropertyChanged("LivingConditions");
					this.OnLivingConditionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LivingTown", DbType="NVarChar(200)")]
		public string LivingTown
		{
			get
			{
				return this._LivingTown;
			}
			set
			{
				if ((this._LivingTown != value))
				{
					this.OnLivingTownChanging(value);
					this.SendPropertyChanging();
					this._LivingTown = value;
					this.SendPropertyChanged("LivingTown");
					this.OnLivingTownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Smoking", DbType="NVarChar(200)")]
		public string Smoking
		{
			get
			{
				return this._Smoking;
			}
			set
			{
				if ((this._Smoking != value))
				{
					this.OnSmokingChanging(value);
					this.SendPropertyChanging();
					this._Smoking = value;
					this.SendPropertyChanged("Smoking");
					this.OnSmokingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Drinking", DbType="NVarChar(200)")]
		public string Drinking
		{
			get
			{
				return this._Drinking;
			}
			set
			{
				if ((this._Drinking != value))
				{
					this.OnDrinkingChanging(value);
					this.SendPropertyChanging();
					this._Drinking = value;
					this.SendPropertyChanged("Drinking");
					this.OnDrinkingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Drugs", DbType="NVarChar(200)")]
		public string Drugs
		{
			get
			{
				return this._Drugs;
			}
			set
			{
				if ((this._Drugs != value))
				{
					this.OnDrugsChanging(value);
					this.SendPropertyChanging();
					this._Drugs = value;
					this.SendPropertyChanged("Drugs");
					this.OnDrugsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LifePriority", DbType="NVarChar(200)")]
		public string LifePriority
		{
			get
			{
				return this._LifePriority;
			}
			set
			{
				if ((this._LifePriority != value))
				{
					this.OnLifePriorityChanging(value);
					this.SendPropertyChanging();
					this._LifePriority = value;
					this.SendPropertyChanged("LifePriority");
					this.OnLifePriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Music", DbType="NVarChar(200)")]
		public string Music
		{
			get
			{
				return this._Music;
			}
			set
			{
				if ((this._Music != value))
				{
					this.OnMusicChanging(value);
					this.SendPropertyChanging();
					this._Music = value;
					this.SendPropertyChanged("Music");
					this.OnMusicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sport", DbType="NVarChar(200)")]
		public string Sport
		{
			get
			{
				return this._Sport;
			}
			set
			{
				if ((this._Sport != value))
				{
					this.OnSportChanging(value);
					this.SendPropertyChanging();
					this._Sport = value;
					this.SendPropertyChanged("Sport");
					this.OnSportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hobby", DbType="NVarChar(200)")]
		public string Hobby
		{
			get
			{
				return this._Hobby;
			}
			set
			{
				if ((this._Hobby != value))
				{
					this.OnHobbyChanging(value);
					this.SendPropertyChanging();
					this._Hobby = value;
					this.SendPropertyChanged("Hobby");
					this.OnHobbyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Books", DbType="NVarChar(200)")]
		public string Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				if ((this._Books != value))
				{
					this.OnBooksChanging(value);
					this.SendPropertyChanging();
					this._Books = value;
					this.SendPropertyChanged("Books");
					this.OnBooksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Films", DbType="NVarChar(200)")]
		public string Films
		{
			get
			{
				return this._Films;
			}
			set
			{
				if ((this._Films != value))
				{
					this.OnFilmsChanging(value);
					this.SendPropertyChanging();
					this._Films = value;
					this.SendPropertyChanged("Films");
					this.OnFilmsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodKinds", DbType="NVarChar(200)")]
		public string GoodKinds
		{
			get
			{
				return this._GoodKinds;
			}
			set
			{
				if ((this._GoodKinds != value))
				{
					this.OnGoodKindsChanging(value);
					this.SendPropertyChanging();
					this._GoodKinds = value;
					this.SendPropertyChanged("GoodKinds");
					this.OnGoodKindsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BadKinds", DbType="NVarChar(200)")]
		public string BadKinds
		{
			get
			{
				return this._BadKinds;
			}
			set
			{
				if ((this._BadKinds != value))
				{
					this.OnBadKindsChanging(value);
					this.SendPropertyChanging();
					this._BadKinds = value;
					this.SendPropertyChanged("BadKinds");
					this.OnBadKindsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainPurpose", DbType="NVarChar(200)")]
		public string MainPurpose
		{
			get
			{
				return this._MainPurpose;
			}
			set
			{
				if ((this._MainPurpose != value))
				{
					this.OnMainPurposeChanging(value);
					this.SendPropertyChanging();
					this._MainPurpose = value;
					this.SendPropertyChanged("MainPurpose");
					this.OnMainPurposeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SexRole", DbType="NVarChar(200)")]
		public string SexRole
		{
			get
			{
				return this._SexRole;
			}
			set
			{
				if ((this._SexRole != value))
				{
					this.OnSexRoleChanging(value);
					this.SendPropertyChanging();
					this._SexRole = value;
					this.SendPropertyChanged("SexRole");
					this.OnSexRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SexPeriod", DbType="NVarChar(200)")]
		public string SexPeriod
		{
			get
			{
				return this._SexPeriod;
			}
			set
			{
				if ((this._SexPeriod != value))
				{
					this.OnSexPeriodChanging(value);
					this.SendPropertyChanging();
					this._SexPeriod = value;
					this.SendPropertyChanged("SexPeriod");
					this.OnSexPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SexRelation", DbType="NVarChar(200)")]
		public string SexRelation
		{
			get
			{
				return this._SexRelation;
			}
			set
			{
				if ((this._SexRelation != value))
				{
					this.OnSexRelationChanging(value);
					this.SendPropertyChanging();
					this._SexRelation = value;
					this.SendPropertyChanged("SexRelation");
					this.OnSexRelationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SexRelationDetail", DbType="NVarChar(200)")]
		public string SexRelationDetail
		{
			get
			{
				return this._SexRelationDetail;
			}
			set
			{
				if ((this._SexRelationDetail != value))
				{
					this.OnSexRelationDetailChanging(value);
					this.SendPropertyChanging();
					this._SexRelationDetail = value;
					this.SendPropertyChanged("SexRelationDetail");
					this.OnSexRelationDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AboutMe", DbType="NVarChar(200)")]
		public string AboutMe
		{
			get
			{
				return this._AboutMe;
			}
			set
			{
				if ((this._AboutMe != value))
				{
					this.OnAboutMeChanging(value);
					this.SendPropertyChanging();
					this._AboutMe = value;
					this.SendPropertyChanged("AboutMe");
					this.OnAboutMeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastVisitDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastVisitDate
		{
			get
			{
				return this._LastVisitDate;
			}
			set
			{
				if ((this._LastVisitDate != value))
				{
					this.OnLastVisitDateChanging(value);
					this.SendPropertyChanging();
					this._LastVisitDate = value;
					this.SendPropertyChanged("LastVisitDate");
					this.OnLastVisitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVip", DbType="Bit NOT NULL")]
		public bool IsVip
		{
			get
			{
				return this._IsVip;
			}
			set
			{
				if ((this._IsVip != value))
				{
					this.OnIsVipChanging(value);
					this.SendPropertyChanging();
					this._IsVip = value;
					this.SendPropertyChanged("IsVip");
					this.OnIsVipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VipEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> VipEnd
		{
			get
			{
				return this._VipEnd;
			}
			set
			{
				if ((this._VipEnd != value))
				{
					this.OnVipEndChanging(value);
					this.SendPropertyChanging();
					this._VipEnd = value;
					this.SendPropertyChanged("VipEnd");
					this.OnVipEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsUp", DbType="BIT NOT NULL")]
		public bool IsUp
		{
			get
			{
				return this._IsUp;
			}
			set
			{
				if ((this._IsUp != value))
				{
					this.OnIsUpChanging(value);
					this.SendPropertyChanging();
					this._IsUp = value;
					this.SendPropertyChanged("IsUp");
					this.OnIsUpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpEnd
		{
			get
			{
				return this._UpEnd;
			}
			set
			{
				if ((this._UpEnd != value))
				{
					this.OnUpEndChanging(value);
					this.SendPropertyChanging();
					this._UpEnd = value;
					this.SendPropertyChanged("UpEnd");
					this.OnUpEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsHidden", DbType="BIT NOT NULL")]
		public bool IsHidden
		{
			get
			{
				return this._IsHidden;
			}
			set
			{
				if ((this._IsHidden != value))
				{
					this.OnIsHiddenChanging(value);
					this.SendPropertyChanging();
					this._IsHidden = value;
					this.SendPropertyChanged("IsHidden");
					this.OnIsHiddenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HiddenEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> HiddenEnd
		{
			get
			{
				return this._HiddenEnd;
			}
			set
			{
				if ((this._HiddenEnd != value))
				{
					this.OnHiddenEndChanging(value);
					this.SendPropertyChanging();
					this._HiddenEnd = value;
					this.SendPropertyChanged("HiddenEnd");
					this.OnHiddenEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserLock", Storage="_UserLocks", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UserLock> UserLocks
		{
			get
			{
				return this._UserLocks;
			}
			set
			{
				this._UserLocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message", Storage="_Messages", ThisKey="ID", OtherKey="ToUserID")]
		public EntitySet<Message> MessagesToUser
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message1", Storage="_Messages1", ThisKey="ID", OtherKey="FromUserID")]
		public EntitySet<Message> MessagesFromUser
		{
			get
			{
				return this._Messages1;
			}
			set
			{
				this._Messages1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friend", Storage="_FriendsFromUser", ThisKey="ID", OtherKey="FromUserID")]
		public EntitySet<Friend> FriendsFromUser
		{
			get
			{
				return this._FriendsFromUser;
			}
			set
			{
				this._FriendsFromUser.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friend1", Storage="_FriendsToUser", ThisKey="ID", OtherKey="ToUserID")]
		public EntitySet<Friend> FriendsToUser
		{
			get
			{
				return this._FriendsToUser;
			}
			set
			{
				this._FriendsToUser.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Dating", Storage="_DatingsFromUser", ThisKey="ID", OtherKey="FromUserID")]
		public EntitySet<Dating> DatingsFromUser
		{
			get
			{
				return this._DatingsFromUser;
			}
			set
			{
				this._DatingsFromUser.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Dating1", Storage="_DatingsToUser", ThisKey="ID", OtherKey="ToUserID")]
		public EntitySet<Dating> DatingsToUser
		{
			get
			{
				return this._DatingsToUser;
			}
			set
			{
				this._DatingsToUser.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PlaceRating", Storage="_PlaceRatings", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<PlaceRating> PlaceRatings
		{
			get
			{
				return this._PlaceRatings;
			}
			set
			{
				this._PlaceRatings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Meeting", Storage="_Meetings", ThisKey="ID", OtherKey="Author")]
		public EntitySet<Meeting> Meetings
		{
			get
			{
				return this._Meetings;
			}
			set
			{
				this._Meetings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MeetingPeople", Storage="_MeetingPeoples", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<MeetingPeople> MeetingPeoples
		{
			get
			{
				return this._MeetingPeoples;
			}
			set
			{
				this._MeetingPeoples.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_webpages_Membership", Storage="_webpages_Membership", ThisKey="ID", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public webpages_Membership webpages_Membership
		{
			get
			{
				return this._webpages_Membership.Entity;
			}
			set
			{
				webpages_Membership previousValue = this._webpages_Membership.Entity;
				if (((previousValue != value) 
							|| (this._webpages_Membership.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._webpages_Membership.Entity = null;
						previousValue.User = null;
					}
					this._webpages_Membership.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("webpages_Membership");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_webpages_UsersInRole", Storage="_webpages_UsersInRoles", ThisKey="ID", OtherKey="UserId")]
		public EntitySet<webpages_UsersInRole> webpages_UsersInRoles
		{
			get
			{
				return this._webpages_UsersInRoles;
			}
			set
			{
				this._webpages_UsersInRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BlockedUser", Storage="_BlockedUsers", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<BlockedUser> BlockedUsers
		{
			get
			{
				return this._BlockedUsers;
			}
			set
			{
				this._BlockedUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MoneyTransaction", Storage="_MoneyTransactions", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<MoneyTransaction> MoneyTransactions
		{
			get
			{
				return this._MoneyTransactions;
			}
			set
			{
				this._MoneyTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserSetting", Storage="_UserSetting", ThisKey="ID", OtherKey="UserID", IsUnique=true, IsForeignKey=false)]
		public UserSetting UserSetting
		{
			get
			{
				return this._UserSetting.Entity;
			}
			set
			{
				UserSetting previousValue = this._UserSetting.Entity;
				if (((previousValue != value) 
							|| (this._UserSetting.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserSetting.Entity = null;
						previousValue.User = null;
					}
					this._UserSetting.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("UserSetting");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Visit", Storage="_Visits", ThisKey="ID", OtherKey="VisitorID")]
		public EntitySet<Visit> VisitorVisits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Visit1", Storage="_Visits1", ThisKey="ID", OtherKey="TargetUserID")]
		public EntitySet<Visit> TargetVisits
		{
			get
			{
				return this._Visits1;
			}
			set
			{
				this._Visits1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PlaceAdmin", Storage="_PlaceAdmins", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<PlaceAdmin> PlaceAdmins
		{
			get
			{
				return this._PlaceAdmins;
			}
			set
			{
				this._PlaceAdmins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_FAQ", Storage="_FAQs", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<FAQ> FAQs
		{
			get
			{
				return this._FAQs;
			}
			set
			{
				this._FAQs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EventPeople", Storage="_EventPeoplesFromUser", ThisKey="ID", OtherKey="FromUserID")]
		public EntitySet<EventPeople> EventPeoplesFromUser
		{
			get
			{
				return this._EventPeoplesFromUser;
			}
			set
			{
				this._EventPeoplesFromUser.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EventPeople1", Storage="_EventPeoplesToUser", ThisKey="ID", OtherKey="ToUserID")]
		public EntitySet<EventPeople> EventPeoplesToUser
		{
			get
			{
				return this._EventPeoplesToUser;
			}
			set
			{
				this._EventPeoplesToUser.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserPhoto", Storage="_UserPhotos", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UserPhoto> UserPhotos
		{
			get
			{
				return this._UserPhotos;
			}
			set
			{
				this._UserPhotos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Town_User", Storage="_Town", ThisKey="TownID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Town Town
		{
			get
			{
				return this._Town.Entity;
			}
			set
			{
				Town previousValue = this._Town.Entity;
				if (((previousValue != value) 
							|| (this._Town.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Town.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Town.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._TownID = value.ID;
					}
					else
					{
						this._TownID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Town");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserLocks(UserLock entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserLocks(UserLock entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.ToUser = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.ToUser = null;
		}
		
		private void attach_Messages1(Message entity)
		{
			this.SendPropertyChanging();
			entity.FromUser = this;
		}
		
		private void detach_Messages1(Message entity)
		{
			this.SendPropertyChanging();
			entity.FromUser = null;
		}
		
		private void attach_FriendsFromUser(Friend entity)
		{
			this.SendPropertyChanging();
			entity.FromUser = this;
		}
		
		private void detach_FriendsFromUser(Friend entity)
		{
			this.SendPropertyChanging();
			entity.FromUser = null;
		}
		
		private void attach_FriendsToUser(Friend entity)
		{
			this.SendPropertyChanging();
			entity.ToUser = this;
		}
		
		private void detach_FriendsToUser(Friend entity)
		{
			this.SendPropertyChanging();
			entity.ToUser = null;
		}
		
		private void attach_DatingsFromUser(Dating entity)
		{
			this.SendPropertyChanging();
			entity.FromUser = this;
		}
		
		private void detach_DatingsFromUser(Dating entity)
		{
			this.SendPropertyChanging();
			entity.FromUser = null;
		}
		
		private void attach_DatingsToUser(Dating entity)
		{
			this.SendPropertyChanging();
			entity.ToUser = this;
		}
		
		private void detach_DatingsToUser(Dating entity)
		{
			this.SendPropertyChanging();
			entity.ToUser = null;
		}
		
		private void attach_PlaceRatings(PlaceRating entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PlaceRatings(PlaceRating entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Meetings(Meeting entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Meetings(Meeting entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_MeetingPeoples(MeetingPeople entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_MeetingPeoples(MeetingPeople entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_webpages_UsersInRoles(webpages_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_webpages_UsersInRoles(webpages_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_BlockedUsers(BlockedUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_BlockedUsers(BlockedUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_MoneyTransactions(MoneyTransaction entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_MoneyTransactions(MoneyTransaction entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Visitor = this;
		}
		
		private void detach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Visitor = null;
		}
		
		private void attach_Visits1(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Visited = this;
		}
		
		private void detach_Visits1(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Visited = null;
		}
		
		private void attach_PlaceAdmins(PlaceAdmin entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PlaceAdmins(PlaceAdmin entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_FAQs(FAQ entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_FAQs(FAQ entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_EventPeoplesFromUser(EventPeople entity)
		{
			this.SendPropertyChanging();
			entity.FromUser = this;
		}
		
		private void detach_EventPeoplesFromUser(EventPeople entity)
		{
			this.SendPropertyChanging();
			entity.FromUser = null;
		}
		
		private void attach_EventPeoplesToUser(EventPeople entity)
		{
			this.SendPropertyChanging();
			entity.ToUser = this;
		}
		
		private void detach_EventPeoplesToUser(EventPeople entity)
		{
			this.SendPropertyChanging();
			entity.ToUser = null;
		}
		
		private void attach_UserPhotos(UserPhoto entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserPhotos(UserPhoto entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.webpages_Membership")]
	public partial class webpages_Membership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private string _ConfirmationToken;
		
		private System.Nullable<bool> _IsConfirmed;
		
		private System.Nullable<System.DateTime> _LastPasswordFailureDate;
		
		private int _PasswordFailuresSinceLastSuccess;
		
		private string _Password;
		
		private System.Nullable<System.DateTime> _PasswordChangedDate;
		
		private string _PasswordSalt;
		
		private string _PasswordVerificationToken;
		
		private System.Nullable<System.DateTime> _PasswordVerificationTokenExpirationDate;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnConfirmationTokenChanging(string value);
    partial void OnConfirmationTokenChanged();
    partial void OnIsConfirmedChanging(System.Nullable<bool> value);
    partial void OnIsConfirmedChanged();
    partial void OnLastPasswordFailureDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastPasswordFailureDateChanged();
    partial void OnPasswordFailuresSinceLastSuccessChanging(int value);
    partial void OnPasswordFailuresSinceLastSuccessChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPasswordChangedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPasswordChangedDateChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnPasswordVerificationTokenChanging(string value);
    partial void OnPasswordVerificationTokenChanged();
    partial void OnPasswordVerificationTokenExpirationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPasswordVerificationTokenExpirationDateChanged();
    #endregion
		
		public webpages_Membership()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfirmationToken", DbType="NVarChar(128)")]
		public string ConfirmationToken
		{
			get
			{
				return this._ConfirmationToken;
			}
			set
			{
				if ((this._ConfirmationToken != value))
				{
					this.OnConfirmationTokenChanging(value);
					this.SendPropertyChanging();
					this._ConfirmationToken = value;
					this.SendPropertyChanged("ConfirmationToken");
					this.OnConfirmationTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsConfirmed", DbType="Bit")]
		public System.Nullable<bool> IsConfirmed
		{
			get
			{
				return this._IsConfirmed;
			}
			set
			{
				if ((this._IsConfirmed != value))
				{
					this.OnIsConfirmedChanging(value);
					this.SendPropertyChanging();
					this._IsConfirmed = value;
					this.SendPropertyChanged("IsConfirmed");
					this.OnIsConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPasswordFailureDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastPasswordFailureDate
		{
			get
			{
				return this._LastPasswordFailureDate;
			}
			set
			{
				if ((this._LastPasswordFailureDate != value))
				{
					this.OnLastPasswordFailureDateChanging(value);
					this.SendPropertyChanging();
					this._LastPasswordFailureDate = value;
					this.SendPropertyChanged("LastPasswordFailureDate");
					this.OnLastPasswordFailureDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordFailuresSinceLastSuccess", DbType="Int NOT NULL")]
		public int PasswordFailuresSinceLastSuccess
		{
			get
			{
				return this._PasswordFailuresSinceLastSuccess;
			}
			set
			{
				if ((this._PasswordFailuresSinceLastSuccess != value))
				{
					this.OnPasswordFailuresSinceLastSuccessChanging(value);
					this.SendPropertyChanging();
					this._PasswordFailuresSinceLastSuccess = value;
					this.SendPropertyChanged("PasswordFailuresSinceLastSuccess");
					this.OnPasswordFailuresSinceLastSuccessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordChangedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PasswordChangedDate
		{
			get
			{
				return this._PasswordChangedDate;
			}
			set
			{
				if ((this._PasswordChangedDate != value))
				{
					this.OnPasswordChangedDateChanging(value);
					this.SendPropertyChanging();
					this._PasswordChangedDate = value;
					this.SendPropertyChanged("PasswordChangedDate");
					this.OnPasswordChangedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordSalt", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordVerificationToken", DbType="NVarChar(128)")]
		public string PasswordVerificationToken
		{
			get
			{
				return this._PasswordVerificationToken;
			}
			set
			{
				if ((this._PasswordVerificationToken != value))
				{
					this.OnPasswordVerificationTokenChanging(value);
					this.SendPropertyChanging();
					this._PasswordVerificationToken = value;
					this.SendPropertyChanged("PasswordVerificationToken");
					this.OnPasswordVerificationTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordVerificationTokenExpirationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PasswordVerificationTokenExpirationDate
		{
			get
			{
				return this._PasswordVerificationTokenExpirationDate;
			}
			set
			{
				if ((this._PasswordVerificationTokenExpirationDate != value))
				{
					this.OnPasswordVerificationTokenExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._PasswordVerificationTokenExpirationDate = value;
					this.SendPropertyChanged("PasswordVerificationTokenExpirationDate");
					this.OnPasswordVerificationTokenExpirationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_webpages_Membership", Storage="_User", ThisKey="UserId", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.webpages_Membership = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.webpages_Membership = this;
						this._UserId = value.ID;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.webpages_Roles")]
	public partial class webpages_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleId;
		
		private string _RoleName;
		
		private EntitySet<webpages_UsersInRole> _webpages_UsersInRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    #endregion
		
		public webpages_Role()
		{
			this._webpages_UsersInRoles = new EntitySet<webpages_UsersInRole>(new Action<webpages_UsersInRole>(this.attach_webpages_UsersInRoles), new Action<webpages_UsersInRole>(this.detach_webpages_UsersInRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="webpages_Role_webpages_UsersInRole", Storage="_webpages_UsersInRoles", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<webpages_UsersInRole> webpages_UsersInRoles
		{
			get
			{
				return this._webpages_UsersInRoles;
			}
			set
			{
				this._webpages_UsersInRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_webpages_UsersInRoles(webpages_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.webpages_Role = this;
		}
		
		private void detach_webpages_UsersInRoles(webpages_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.webpages_Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.webpages_UsersInRoles")]
	public partial class webpages_UsersInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _RoleId;
		
		private EntityRef<webpages_Role> _webpages_Role;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    #endregion
		
		public webpages_UsersInRole()
		{
			this._webpages_Role = default(EntityRef<webpages_Role>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._webpages_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="webpages_Role_webpages_UsersInRole", Storage="_webpages_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public webpages_Role webpages_Role
		{
			get
			{
				return this._webpages_Role.Entity;
			}
			set
			{
				webpages_Role previousValue = this._webpages_Role.Entity;
				if (((previousValue != value) 
							|| (this._webpages_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._webpages_Role.Entity = null;
						previousValue.webpages_UsersInRoles.Remove(this);
					}
					this._webpages_Role.Entity = value;
					if ((value != null))
					{
						value.webpages_UsersInRoles.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("webpages_Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_webpages_UsersInRole", Storage="_User", ThisKey="UserId", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.webpages_UsersInRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.webpages_UsersInRoles.Add(this);
						this._UserId = value.ID;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlockedUsers")]
	public partial class BlockedUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private System.Nullable<long> _StartIP;
		
		private System.Nullable<long> _EndIP;
		
		private System.Nullable<System.DateTime> _BlockTill;
		
		private int _BlockType;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnStartIPChanging(System.Nullable<long> value);
    partial void OnStartIPChanged();
    partial void OnEndIPChanging(System.Nullable<long> value);
    partial void OnEndIPChanged();
    partial void OnBlockTillChanging(System.Nullable<System.DateTime> value);
    partial void OnBlockTillChanged();
    partial void OnBlockTypeChanging(int value);
    partial void OnBlockTypeChanged();
    #endregion
		
		public BlockedUser()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartIP", DbType="BigInt")]
		public System.Nullable<long> StartIP
		{
			get
			{
				return this._StartIP;
			}
			set
			{
				if ((this._StartIP != value))
				{
					this.OnStartIPChanging(value);
					this.SendPropertyChanging();
					this._StartIP = value;
					this.SendPropertyChanged("StartIP");
					this.OnStartIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndIP", DbType="BigInt")]
		public System.Nullable<long> EndIP
		{
			get
			{
				return this._EndIP;
			}
			set
			{
				if ((this._EndIP != value))
				{
					this.OnEndIPChanging(value);
					this.SendPropertyChanging();
					this._EndIP = value;
					this.SendPropertyChanged("EndIP");
					this.OnEndIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlockTill", DbType="DateTime")]
		public System.Nullable<System.DateTime> BlockTill
		{
			get
			{
				return this._BlockTill;
			}
			set
			{
				if ((this._BlockTill != value))
				{
					this.OnBlockTillChanging(value);
					this.SendPropertyChanging();
					this._BlockTill = value;
					this.SendPropertyChanged("BlockTill");
					this.OnBlockTillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlockType", DbType="Int NOT NULL")]
		public int BlockType
		{
			get
			{
				return this._BlockType;
			}
			set
			{
				if ((this._BlockType != value))
				{
					this.OnBlockTypeChanging(value);
					this.SendPropertyChanging();
					this._BlockType = value;
					this.SendPropertyChanged("BlockType");
					this.OnBlockTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BlockedUser", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.BlockedUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.BlockedUsers.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MoneyTransactions")]
	public partial class MoneyTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private System.DateTime _Date;
		
		private int _Status;
		
		private decimal _Sum;
		
		private string _Description;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnSumChanging(decimal value);
    partial void OnSumChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public MoneyTransaction()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sum", DbType="Decimal(18,2) NOT NULL")]
		public decimal Sum
		{
			get
			{
				return this._Sum;
			}
			set
			{
				if ((this._Sum != value))
				{
					this.OnSumChanging(value);
					this.SendPropertyChanging();
					this._Sum = value;
					this.SendPropertyChanged("Sum");
					this.OnSumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MoneyTransaction", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MoneyTransactions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MoneyTransactions.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserSettings")]
	public partial class UserSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private int _SendLetters;
		
		private int _InviteForMeeting;
		
		private int _OfferFriendship;
		
		private int _ViewMeetings;
		
		private int _ViewFriends;
		
		private int _ViewPhotos;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnSendLettersChanging(int value);
    partial void OnSendLettersChanged();
    partial void OnInviteForMeetingChanging(int value);
    partial void OnInviteForMeetingChanged();
    partial void OnOfferFriendshipChanging(int value);
    partial void OnOfferFriendshipChanged();
    partial void OnViewMeetingsChanging(int value);
    partial void OnViewMeetingsChanged();
    partial void OnViewFriendsChanging(int value);
    partial void OnViewFriendsChanged();
    partial void OnViewPhotosChanging(int value);
    partial void OnViewPhotosChanged();
    #endregion
		
		public UserSetting()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SendLetters", DbType="Int NOT NULL")]
		public int SendLetters
		{
			get
			{
				return this._SendLetters;
			}
			set
			{
				if ((this._SendLetters != value))
				{
					this.OnSendLettersChanging(value);
					this.SendPropertyChanging();
					this._SendLetters = value;
					this.SendPropertyChanged("SendLetters");
					this.OnSendLettersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InviteForMeeting", DbType="Int NOT NULL")]
		public int InviteForMeeting
		{
			get
			{
				return this._InviteForMeeting;
			}
			set
			{
				if ((this._InviteForMeeting != value))
				{
					this.OnInviteForMeetingChanging(value);
					this.SendPropertyChanging();
					this._InviteForMeeting = value;
					this.SendPropertyChanged("InviteForMeeting");
					this.OnInviteForMeetingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfferFriendship", DbType="Int NOT NULL")]
		public int OfferFriendship
		{
			get
			{
				return this._OfferFriendship;
			}
			set
			{
				if ((this._OfferFriendship != value))
				{
					this.OnOfferFriendshipChanging(value);
					this.SendPropertyChanging();
					this._OfferFriendship = value;
					this.SendPropertyChanged("OfferFriendship");
					this.OnOfferFriendshipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViewMeetings", DbType="Int NOT NULL")]
		public int ViewMeetings
		{
			get
			{
				return this._ViewMeetings;
			}
			set
			{
				if ((this._ViewMeetings != value))
				{
					this.OnViewMeetingsChanging(value);
					this.SendPropertyChanging();
					this._ViewMeetings = value;
					this.SendPropertyChanged("ViewMeetings");
					this.OnViewMeetingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViewFriends", DbType="Int NOT NULL")]
		public int ViewFriends
		{
			get
			{
				return this._ViewFriends;
			}
			set
			{
				if ((this._ViewFriends != value))
				{
					this.OnViewFriendsChanging(value);
					this.SendPropertyChanging();
					this._ViewFriends = value;
					this.SendPropertyChanged("ViewFriends");
					this.OnViewFriendsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViewPhotos", DbType="Int NOT NULL")]
		public int ViewPhotos
		{
			get
			{
				return this._ViewPhotos;
			}
			set
			{
				if ((this._ViewPhotos != value))
				{
					this.OnViewPhotosChanging(value);
					this.SendPropertyChanging();
					this._ViewPhotos = value;
					this.SendPropertyChanged("ViewPhotos");
					this.OnViewPhotosChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserSetting", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserSetting = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserSetting = this;
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Visits")]
	public partial class Visit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _VisitDate;
		
		private int _TargetUserID;
		
		private int _VisitorID;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnVisitDateChanging(System.DateTime value);
    partial void OnVisitDateChanged();
    partial void OnTargetUserIDChanging(int value);
    partial void OnTargetUserIDChanged();
    partial void OnVisitorIDChanging(int value);
    partial void OnVisitorIDChanged();
    #endregion
		
		public Visit()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitDate", DbType="DateTime NOT NULL")]
		public System.DateTime VisitDate
		{
			get
			{
				return this._VisitDate;
			}
			set
			{
				if ((this._VisitDate != value))
				{
					this.OnVisitDateChanging(value);
					this.SendPropertyChanging();
					this._VisitDate = value;
					this.SendPropertyChanged("VisitDate");
					this.OnVisitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetUserID", DbType="Int NOT NULL")]
		public int TargetUserID
		{
			get
			{
				return this._TargetUserID;
			}
			set
			{
				if ((this._TargetUserID != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTargetUserIDChanging(value);
					this.SendPropertyChanging();
					this._TargetUserID = value;
					this.SendPropertyChanged("TargetUserID");
					this.OnTargetUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitorID", DbType="Int NOT NULL")]
		public int VisitorID
		{
			get
			{
				return this._VisitorID;
			}
			set
			{
				if ((this._VisitorID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisitorIDChanging(value);
					this.SendPropertyChanging();
					this._VisitorID = value;
					this.SendPropertyChanged("VisitorID");
					this.OnVisitorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Visit", Storage="_User", ThisKey="VisitorID", OtherKey="ID", IsForeignKey=true)]
		public User Visitor
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.VisitorVisits.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.VisitorVisits.Add(this);
						this._VisitorID = value.ID;
					}
					else
					{
						this._VisitorID = default(int);
					}
					this.SendPropertyChanged("Visitor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Visit1", Storage="_User1", ThisKey="TargetUserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User Visited
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.TargetVisits.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.TargetVisits.Add(this);
						this._TargetUserID = value.ID;
					}
					else
					{
						this._TargetUserID = default(int);
					}
					this.SendPropertyChanged("Visited");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlaceAdmins")]
	public partial class PlaceAdmin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _PlaceID;
		
		private EntityRef<User> _User;
		
		private EntityRef<Place> _Place;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnPlaceIDChanging(int value);
    partial void OnPlaceIDChanged();
    #endregion
		
		public PlaceAdmin()
		{
			this._User = default(EntityRef<User>);
			this._Place = default(EntityRef<Place>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaceID", DbType="Int NOT NULL")]
		public int PlaceID
		{
			get
			{
				return this._PlaceID;
			}
			set
			{
				if ((this._PlaceID != value))
				{
					if (this._Place.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlaceIDChanging(value);
					this.SendPropertyChanging();
					this._PlaceID = value;
					this.SendPropertyChanged("PlaceID");
					this.OnPlaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PlaceAdmin", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PlaceAdmins.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PlaceAdmins.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Place_PlaceAdmin", Storage="_Place", ThisKey="PlaceID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Place Place
		{
			get
			{
				return this._Place.Entity;
			}
			set
			{
				Place previousValue = this._Place.Entity;
				if (((previousValue != value) 
							|| (this._Place.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Place.Entity = null;
						previousValue.PlaceAdmins.Remove(this);
					}
					this._Place.Entity = value;
					if ((value != null))
					{
						value.PlaceAdmins.Add(this);
						this._PlaceID = value.ID;
					}
					else
					{
						this._PlaceID = default(int);
					}
					this.SendPropertyChanged("Place");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Places")]
	public partial class Place : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Type;
		
		private int _TownID;
		
		private string _Name;
		
		private string _Adress;
		
		private string _Metro;
		
		private System.Nullable<int> _MinPay;
		
		private System.Nullable<int> _MaxPay;
		
		private string _Logo;
		
		private string _Description;
		
		private bool _Approved;
		
		private string _AdminMail;
		
		private bool _IsVip;
		
		private System.Nullable<System.DateTime> _VipEnd;
		
		private EntitySet<PlaceRating> _PlaceRatings;
		
		private EntitySet<PlaceImage> _PlaceImages;
		
		private EntitySet<Meeting> _Meetings;
		
		private EntitySet<PlaceAdmin> _PlaceAdmins;
		
		private EntityRef<Town> _Town;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnTownIDChanging(int value);
    partial void OnTownIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAdressChanging(string value);
    partial void OnAdressChanged();
    partial void OnMetroChanging(string value);
    partial void OnMetroChanged();
    partial void OnMinPayChanging(System.Nullable<int> value);
    partial void OnMinPayChanged();
    partial void OnMaxPayChanging(System.Nullable<int> value);
    partial void OnMaxPayChanged();
    partial void OnLogoChanging(string value);
    partial void OnLogoChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnApprovedChanging(bool value);
    partial void OnApprovedChanged();
    partial void OnAdminMailChanging(string value);
    partial void OnAdminMailChanged();
    partial void OnIsVipChanging(bool value);
    partial void OnIsVipChanged();
    partial void OnVipEndChanging(System.Nullable<System.DateTime> value);
    partial void OnVipEndChanged();
    #endregion
		
		public Place()
		{
			this._PlaceRatings = new EntitySet<PlaceRating>(new Action<PlaceRating>(this.attach_PlaceRatings), new Action<PlaceRating>(this.detach_PlaceRatings));
			this._PlaceImages = new EntitySet<PlaceImage>(new Action<PlaceImage>(this.attach_PlaceImages), new Action<PlaceImage>(this.detach_PlaceImages));
			this._Meetings = new EntitySet<Meeting>(new Action<Meeting>(this.attach_Meetings), new Action<Meeting>(this.detach_Meetings));
			this._PlaceAdmins = new EntitySet<PlaceAdmin>(new Action<PlaceAdmin>(this.attach_PlaceAdmins), new Action<PlaceAdmin>(this.detach_PlaceAdmins));
			this._Town = default(EntityRef<Town>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TownID", DbType="Int NOT NULL")]
		public int TownID
		{
			get
			{
				return this._TownID;
			}
			set
			{
				if ((this._TownID != value))
				{
					if (this._Town.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTownIDChanging(value);
					this.SendPropertyChanging();
					this._TownID = value;
					this.SendPropertyChanged("TownID");
					this.OnTownIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adress", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Adress
		{
			get
			{
				return this._Adress;
			}
			set
			{
				if ((this._Adress != value))
				{
					this.OnAdressChanging(value);
					this.SendPropertyChanging();
					this._Adress = value;
					this.SendPropertyChanged("Adress");
					this.OnAdressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Metro", DbType="NVarChar(200)")]
		public string Metro
		{
			get
			{
				return this._Metro;
			}
			set
			{
				if ((this._Metro != value))
				{
					this.OnMetroChanging(value);
					this.SendPropertyChanging();
					this._Metro = value;
					this.SendPropertyChanged("Metro");
					this.OnMetroChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinPay", DbType="Int")]
		public System.Nullable<int> MinPay
		{
			get
			{
				return this._MinPay;
			}
			set
			{
				if ((this._MinPay != value))
				{
					this.OnMinPayChanging(value);
					this.SendPropertyChanging();
					this._MinPay = value;
					this.SendPropertyChanged("MinPay");
					this.OnMinPayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxPay", DbType="Int")]
		public System.Nullable<int> MaxPay
		{
			get
			{
				return this._MaxPay;
			}
			set
			{
				if ((this._MaxPay != value))
				{
					this.OnMaxPayChanging(value);
					this.SendPropertyChanging();
					this._MaxPay = value;
					this.SendPropertyChanged("MaxPay");
					this.OnMaxPayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logo", DbType="NVarChar(500)")]
		public string Logo
		{
			get
			{
				return this._Logo;
			}
			set
			{
				if ((this._Logo != value))
				{
					this.OnLogoChanging(value);
					this.SendPropertyChanging();
					this._Logo = value;
					this.SendPropertyChanged("Logo");
					this.OnLogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(2000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Approved", DbType="Bit NOT NULL")]
		public bool Approved
		{
			get
			{
				return this._Approved;
			}
			set
			{
				if ((this._Approved != value))
				{
					this.OnApprovedChanging(value);
					this.SendPropertyChanging();
					this._Approved = value;
					this.SendPropertyChanged("Approved");
					this.OnApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminMail", DbType="NVarChar(200)")]
		public string AdminMail
		{
			get
			{
				return this._AdminMail;
			}
			set
			{
				if ((this._AdminMail != value))
				{
					this.OnAdminMailChanging(value);
					this.SendPropertyChanging();
					this._AdminMail = value;
					this.SendPropertyChanged("AdminMail");
					this.OnAdminMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVip", DbType="Bit NOT NULL")]
		public bool IsVip
		{
			get
			{
				return this._IsVip;
			}
			set
			{
				if ((this._IsVip != value))
				{
					this.OnIsVipChanging(value);
					this.SendPropertyChanging();
					this._IsVip = value;
					this.SendPropertyChanged("IsVip");
					this.OnIsVipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VipEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> VipEnd
		{
			get
			{
				return this._VipEnd;
			}
			set
			{
				if ((this._VipEnd != value))
				{
					this.OnVipEndChanging(value);
					this.SendPropertyChanging();
					this._VipEnd = value;
					this.SendPropertyChanged("VipEnd");
					this.OnVipEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Place_PlaceRating", Storage="_PlaceRatings", ThisKey="ID", OtherKey="PlaceID")]
		public EntitySet<PlaceRating> PlaceRatings
		{
			get
			{
				return this._PlaceRatings;
			}
			set
			{
				this._PlaceRatings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Place_PlaceImage", Storage="_PlaceImages", ThisKey="ID", OtherKey="PlaceID")]
		public EntitySet<PlaceImage> PlaceImages
		{
			get
			{
				return this._PlaceImages;
			}
			set
			{
				this._PlaceImages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Place_Meeting", Storage="_Meetings", ThisKey="ID", OtherKey="PlaceID")]
		public EntitySet<Meeting> Meetings
		{
			get
			{
				return this._Meetings;
			}
			set
			{
				this._Meetings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Place_PlaceAdmin", Storage="_PlaceAdmins", ThisKey="ID", OtherKey="PlaceID")]
		public EntitySet<PlaceAdmin> PlaceAdmins
		{
			get
			{
				return this._PlaceAdmins;
			}
			set
			{
				this._PlaceAdmins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Town_Place", Storage="_Town", ThisKey="TownID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Town Town
		{
			get
			{
				return this._Town.Entity;
			}
			set
			{
				Town previousValue = this._Town.Entity;
				if (((previousValue != value) 
							|| (this._Town.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Town.Entity = null;
						previousValue.Places.Remove(this);
					}
					this._Town.Entity = value;
					if ((value != null))
					{
						value.Places.Add(this);
						this._TownID = value.ID;
					}
					else
					{
						this._TownID = default(int);
					}
					this.SendPropertyChanged("Town");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlaceRatings(PlaceRating entity)
		{
			this.SendPropertyChanging();
			entity.Place = this;
		}
		
		private void detach_PlaceRatings(PlaceRating entity)
		{
			this.SendPropertyChanging();
			entity.Place = null;
		}
		
		private void attach_PlaceImages(PlaceImage entity)
		{
			this.SendPropertyChanging();
			entity.Place = this;
		}
		
		private void detach_PlaceImages(PlaceImage entity)
		{
			this.SendPropertyChanging();
			entity.Place = null;
		}
		
		private void attach_Meetings(Meeting entity)
		{
			this.SendPropertyChanging();
			entity.Place = this;
		}
		
		private void detach_Meetings(Meeting entity)
		{
			this.SendPropertyChanging();
			entity.Place = null;
		}
		
		private void attach_PlaceAdmins(PlaceAdmin entity)
		{
			this.SendPropertyChanging();
			entity.Place = this;
		}
		
		private void detach_PlaceAdmins(PlaceAdmin entity)
		{
			this.SendPropertyChanging();
			entity.Place = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TextPages")]
	public partial class TextPage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Text;
		
		private string _URL;
		
		private bool _ShowForm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    partial void OnShowFormChanging(bool value);
    partial void OnShowFormChanged();
    #endregion
		
		public TextPage()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowForm", DbType="Bit NOT NULL")]
		public bool ShowForm
		{
			get
			{
				return this._ShowForm;
			}
			set
			{
				if ((this._ShowForm != value))
				{
					this.OnShowFormChanging(value);
					this.SendPropertyChanging();
					this._ShowForm = value;
					this.SendPropertyChanged("ShowForm");
					this.OnShowFormChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FAQ")]
	public partial class FAQ : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Qst;
		
		private string _Ans;
		
		private System.Nullable<int> _UserID;
		
		private bool _Visible;
		
		private System.DateTime _CreateDate;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnQstChanging(string value);
    partial void OnQstChanged();
    partial void OnAnsChanging(string value);
    partial void OnAnsChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnVisibleChanging(bool value);
    partial void OnVisibleChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public FAQ()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qst", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Qst
		{
			get
			{
				return this._Qst;
			}
			set
			{
				if ((this._Qst != value))
				{
					this.OnQstChanging(value);
					this.SendPropertyChanging();
					this._Qst = value;
					this.SendPropertyChanged("Qst");
					this.OnQstChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ans", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Ans
		{
			get
			{
				return this._Ans;
			}
			set
			{
				if ((this._Ans != value))
				{
					this.OnAnsChanging(value);
					this.SendPropertyChanging();
					this._Ans = value;
					this.SendPropertyChanged("Ans");
					this.OnAnsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Visible", DbType="Bit NOT NULL")]
		public bool Visible
		{
			get
			{
				return this._Visible;
			}
			set
			{
				if ((this._Visible != value))
				{
					this.OnVisibleChanging(value);
					this.SendPropertyChanging();
					this._Visible = value;
					this.SendPropertyChanged("Visible");
					this.OnVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_FAQ", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.FAQs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.FAQs.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventCats")]
	public partial class EventCat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _ExportURL;
		
		private EntitySet<EventCatsForTown> _EventCatsForTowns;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnExportURLChanging(string value);
    partial void OnExportURLChanged();
    #endregion
		
		public EventCat()
		{
			this._EventCatsForTowns = new EntitySet<EventCatsForTown>(new Action<EventCatsForTown>(this.attach_EventCatsForTowns), new Action<EventCatsForTown>(this.detach_EventCatsForTowns));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExportURL", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string ExportURL
		{
			get
			{
				return this._ExportURL;
			}
			set
			{
				if ((this._ExportURL != value))
				{
					this.OnExportURLChanging(value);
					this.SendPropertyChanging();
					this._ExportURL = value;
					this.SendPropertyChanged("ExportURL");
					this.OnExportURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventCat_EventCatsForTown", Storage="_EventCatsForTowns", ThisKey="ID", OtherKey="CatID")]
		public EntitySet<EventCatsForTown> EventCatsForTowns
		{
			get
			{
				return this._EventCatsForTowns;
			}
			set
			{
				this._EventCatsForTowns.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventCatsForTowns(EventCatsForTown entity)
		{
			this.SendPropertyChanging();
			entity.EventCat = this;
		}
		
		private void detach_EventCatsForTowns(EventCatsForTown entity)
		{
			this.SendPropertyChanging();
			entity.EventCat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventCatsForTowns")]
	public partial class EventCatsForTown : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CatID;
		
		private int _TownID;
		
		private EntitySet<Event> _Events;
		
		private EntityRef<EventCat> _EventCat;
		
		private EntityRef<Town> _Town;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCatIDChanging(int value);
    partial void OnCatIDChanged();
    partial void OnTownIDChanging(int value);
    partial void OnTownIDChanged();
    #endregion
		
		public EventCatsForTown()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._EventCat = default(EntityRef<EventCat>);
			this._Town = default(EntityRef<Town>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatID", DbType="Int NOT NULL")]
		public int CatID
		{
			get
			{
				return this._CatID;
			}
			set
			{
				if ((this._CatID != value))
				{
					if (this._EventCat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCatIDChanging(value);
					this.SendPropertyChanging();
					this._CatID = value;
					this.SendPropertyChanged("CatID");
					this.OnCatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TownID", DbType="Int NOT NULL")]
		public int TownID
		{
			get
			{
				return this._TownID;
			}
			set
			{
				if ((this._TownID != value))
				{
					if (this._Town.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTownIDChanging(value);
					this.SendPropertyChanging();
					this._TownID = value;
					this.SendPropertyChanged("TownID");
					this.OnTownIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventCatsForTown_Event", Storage="_Events", ThisKey="ID", OtherKey="TownCatID")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventCat_EventCatsForTown", Storage="_EventCat", ThisKey="CatID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EventCat EventCat
		{
			get
			{
				return this._EventCat.Entity;
			}
			set
			{
				EventCat previousValue = this._EventCat.Entity;
				if (((previousValue != value) 
							|| (this._EventCat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventCat.Entity = null;
						previousValue.EventCatsForTowns.Remove(this);
					}
					this._EventCat.Entity = value;
					if ((value != null))
					{
						value.EventCatsForTowns.Add(this);
						this._CatID = value.ID;
					}
					else
					{
						this._CatID = default(int);
					}
					this.SendPropertyChanged("EventCat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Town_EventCatsForTown", Storage="_Town", ThisKey="TownID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Town Town
		{
			get
			{
				return this._Town.Entity;
			}
			set
			{
				Town previousValue = this._Town.Entity;
				if (((previousValue != value) 
							|| (this._Town.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Town.Entity = null;
						previousValue.EventCatsForTowns.Remove(this);
					}
					this._Town.Entity = value;
					if ((value != null))
					{
						value.EventCatsForTowns.Add(this);
						this._TownID = value.ID;
					}
					else
					{
						this._TownID = default(int);
					}
					this.SendPropertyChanged("Town");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.EventCatsForTown = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.EventCatsForTown = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Events")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private string _Name;
		
		private string _ShortDescr;
		
		private string _FullDescr;
		
		private string _Photo;
		
		private int _TownCatID;
		
		private string _ExportLink;
		
		private EntitySet<EventPeople> _EventPeoples;
		
		private EntityRef<EventCatsForTown> _EventCatsForTown;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortDescrChanging(string value);
    partial void OnShortDescrChanged();
    partial void OnFullDescrChanging(string value);
    partial void OnFullDescrChanged();
    partial void OnPhotoChanging(string value);
    partial void OnPhotoChanged();
    partial void OnTownCatIDChanging(int value);
    partial void OnTownCatIDChanged();
    partial void OnExportLinkChanging(string value);
    partial void OnExportLinkChanged();
    #endregion
		
		public Event()
		{
			this._EventPeoples = new EntitySet<EventPeople>(new Action<EventPeople>(this.attach_EventPeoples), new Action<EventPeople>(this.detach_EventPeoples));
			this._EventCatsForTown = default(EntityRef<EventCatsForTown>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortDescr", DbType="NVarChar(MAX)")]
		public string ShortDescr
		{
			get
			{
				return this._ShortDescr;
			}
			set
			{
				if ((this._ShortDescr != value))
				{
					this.OnShortDescrChanging(value);
					this.SendPropertyChanging();
					this._ShortDescr = value;
					this.SendPropertyChanged("ShortDescr");
					this.OnShortDescrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullDescr", DbType="NVarChar(MAX)")]
		public string FullDescr
		{
			get
			{
				return this._FullDescr;
			}
			set
			{
				if ((this._FullDescr != value))
				{
					this.OnFullDescrChanging(value);
					this.SendPropertyChanging();
					this._FullDescr = value;
					this.SendPropertyChanged("FullDescr");
					this.OnFullDescrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="NVarChar(500)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TownCatID", DbType="Int NOT NULL")]
		public int TownCatID
		{
			get
			{
				return this._TownCatID;
			}
			set
			{
				if ((this._TownCatID != value))
				{
					if (this._EventCatsForTown.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTownCatIDChanging(value);
					this.SendPropertyChanging();
					this._TownCatID = value;
					this.SendPropertyChanged("TownCatID");
					this.OnTownCatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExportLink", DbType="NVarChar(500)")]
		public string ExportLink
		{
			get
			{
				return this._ExportLink;
			}
			set
			{
				if ((this._ExportLink != value))
				{
					this.OnExportLinkChanging(value);
					this.SendPropertyChanging();
					this._ExportLink = value;
					this.SendPropertyChanged("ExportLink");
					this.OnExportLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventPeople", Storage="_EventPeoples", ThisKey="ID", OtherKey="EventID")]
		public EntitySet<EventPeople> EventPeoples
		{
			get
			{
				return this._EventPeoples;
			}
			set
			{
				this._EventPeoples.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventCatsForTown_Event", Storage="_EventCatsForTown", ThisKey="TownCatID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EventCatsForTown EventCatsForTown
		{
			get
			{
				return this._EventCatsForTown.Entity;
			}
			set
			{
				EventCatsForTown previousValue = this._EventCatsForTown.Entity;
				if (((previousValue != value) 
							|| (this._EventCatsForTown.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventCatsForTown.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._EventCatsForTown.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._TownCatID = value.ID;
					}
					else
					{
						this._TownCatID = default(int);
					}
					this.SendPropertyChanged("EventCatsForTown");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventPeoples(EventPeople entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_EventPeoples(EventPeople entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventPeoples")]
	public partial class EventPeople : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _EventID;
		
		private int _FromUserID;
		
		private System.Nullable<int> _ToUserID;
		
		private int _Status;
		
		private System.DateTime _SendDate;
		
		private int _Type;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<User> _FromUser;
		
		private EntityRef<User> _ToUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnFromUserIDChanging(int value);
    partial void OnFromUserIDChanged();
    partial void OnToUserIDChanging(System.Nullable<int> value);
    partial void OnToUserIDChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnSendDateChanging(System.DateTime value);
    partial void OnSendDateChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    #endregion
		
		public EventPeople()
		{
			this._Event = default(EntityRef<Event>);
			this._FromUser = default(EntityRef<User>);
			this._ToUser = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromUserID", DbType="Int NOT NULL")]
		public int FromUserID
		{
			get
			{
				return this._FromUserID;
			}
			set
			{
				if ((this._FromUserID != value))
				{
					if (this._FromUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromUserIDChanging(value);
					this.SendPropertyChanging();
					this._FromUserID = value;
					this.SendPropertyChanged("FromUserID");
					this.OnFromUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToUserID", DbType="Int")]
		public System.Nullable<int> ToUserID
		{
			get
			{
				return this._ToUserID;
			}
			set
			{
				if ((this._ToUserID != value))
				{
					if (this._ToUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToUserIDChanging(value);
					this.SendPropertyChanging();
					this._ToUserID = value;
					this.SendPropertyChanged("ToUserID");
					this.OnToUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SendDate", DbType="DateTime NOT NULL")]
		public System.DateTime SendDate
		{
			get
			{
				return this._SendDate;
			}
			set
			{
				if ((this._SendDate != value))
				{
					this.OnSendDateChanging(value);
					this.SendPropertyChanging();
					this._SendDate = value;
					this.SendPropertyChanged("SendDate");
					this.OnSendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventPeople", Storage="_Event", ThisKey="EventID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.EventPeoples.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.EventPeoples.Add(this);
						this._EventID = value.ID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EventPeople", Storage="_FromUser", ThisKey="FromUserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User FromUser
		{
			get
			{
				return this._FromUser.Entity;
			}
			set
			{
				User previousValue = this._FromUser.Entity;
				if (((previousValue != value) 
							|| (this._FromUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FromUser.Entity = null;
						previousValue.EventPeoplesFromUser.Remove(this);
					}
					this._FromUser.Entity = value;
					if ((value != null))
					{
						value.EventPeoplesFromUser.Add(this);
						this._FromUserID = value.ID;
					}
					else
					{
						this._FromUserID = default(int);
					}
					this.SendPropertyChanged("FromUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EventPeople1", Storage="_ToUser", ThisKey="ToUserID", OtherKey="ID", IsForeignKey=true)]
		public User ToUser
		{
			get
			{
				return this._ToUser.Entity;
			}
			set
			{
				User previousValue = this._ToUser.Entity;
				if (((previousValue != value) 
							|| (this._ToUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToUser.Entity = null;
						previousValue.EventPeoplesToUser.Remove(this);
					}
					this._ToUser.Entity = value;
					if ((value != null))
					{
						value.EventPeoplesToUser.Add(this);
						this._ToUserID = value.ID;
					}
					else
					{
						this._ToUserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ToUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserPhotos")]
	public partial class UserPhoto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Path;
		
		private int _UserID;
		
		private bool _IsAvatar;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnIsAvatarChanging(bool value);
    partial void OnIsAvatarChanged();
    #endregion
		
		public UserPhoto()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAvatar", DbType="Bit NOT NULL")]
		public bool IsAvatar
		{
			get
			{
				return this._IsAvatar;
			}
			set
			{
				if ((this._IsAvatar != value))
				{
					this.OnIsAvatarChanging(value);
					this.SendPropertyChanging();
					this._IsAvatar = value;
					this.SendPropertyChanged("IsAvatar");
					this.OnIsAvatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserPhoto", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserPhotos.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserPhotos.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
